diff --git a/cms/navigation/tests/test_forms.py b/cms/navigation/tests/test_forms.py
index 69db6fc..e4ecb94 100644
--- a/cms/navigation/tests/test_forms.py
+++ b/cms/navigation/tests/test_forms.py
@@ -1,7 +1,8 @@
+import uuid
+
 from django.test import TestCase
 from wagtail.test.utils.form_data import nested_form_data, streamfield
 
-from cms.navigation.forms import MainMenuAdminForm
 from wagtail.admin.panels import get_edit_handler
 from cms.navigation.models import MainMenu
 from cms.navigation.tests.factories import (
@@ -17,6 +18,12 @@ class MainMenuAdminFormTestCase(TestCase):
         cls.menu = MainMenuFactory()
         cls.form_class = get_edit_handler(MainMenu).get_form_class()
 
+        cls.theme_page_1 = ThemePageFactory()
+        cls.theme_page_2 = ThemePageFactory()
+
+        cls.topic_page_1 = TopicPageFactory(parent=cls.theme_page_1)
+        cls.topic_page_2 = TopicPageFactory(parent=cls.theme_page_2)
+
     def raw_form_data(self, highlights_data=None, columns_data=None) -> dict:
         highlights_data = highlights_data or []
         columns_data = columns_data or []
@@ -28,15 +35,13 @@ class MainMenuAdminFormTestCase(TestCase):
 
     def test_clean_highlights_no_duplicates(self):
         """Checks that different pages in the highlights do not trigger any validation errors."""
-        page1 = ThemePageFactory()
-        page2 = ThemePageFactory()
 
         raw_data = self.raw_form_data(
             highlights_data=[
                 (
                     "highlight",
                     {
-                        "page": page1.pk,
+                        "page": self.theme_page_1.pk,
                         "external_url": "",
                         "description": "Highlight 1",
                     },
@@ -44,7 +49,7 @@ class MainMenuAdminFormTestCase(TestCase):
                 (
                     "highlight",
                     {
-                        "page": page2.pk,
+                        "page": self.theme_page_2.pk,
                         "external_url": "",
                         "description": "Highlight 2",
                     },
@@ -57,71 +62,43 @@ class MainMenuAdminFormTestCase(TestCase):
 
     def test_clean_highlights_duplicate_page(self):
         """Checks that the same page used twice in highlights raises an error."""
-        page = ThemePageFactory()
-
+        highlight = {"page": self.theme_page_1.pk, "external_url": "", "description": "Highlight 1"}
         raw_data = self.raw_form_data(
             highlights_data=[
-                (
-                    "highlight",
-                    {
-                        "page": page.pk,
-                        "external_url": "",
-                        "description": "Highlight 1",
-                    },
-                ),
-                (
-                    "highlight",
-                    {
-                        "page": page.pk,
-                        "external_url": "",
-                        "description": "Highlight 2",
-                    },
-                ),
+                ("highlight", highlight),
+                ("highlight", highlight),
             ]
         )
 
         form = self.form_class(instance=self.menu, data=nested_form_data(raw_data))
         self.assertFalse(form.is_valid())
 
-        self.assertIn("highlights", form.errors)
-        print("Form errors", form.errors["highlights"][0])
-        self.assertIn("Duplicate page. Please choose a different one.", form.errors["highlights"][0])
+        self.assertEqual(
+            form.errors["highlights"].data[0].block_errors[1].block_errors["page"].message,
+            "Duplicate page. Please choose a different one."
+        )
 
     def test_clean_highlights_duplicate_external_url(self):
         """Checks that the same external URL used twice in highlights raises an error."""
         url = "https://example.com"
 
+        highlight = {"page": "", "external_url": url, "title": "test", "description": "Highlight 1"}
         raw_data = self.raw_form_data(
             highlights_data=[
-                (
-                    "highlight",
-                    {
-                        "page": "",
-                        "external_url": url,
-                        "description": "Highlight 1",
-                    },
-                ),
-                (
-                    "highlight",
-                    {
-                        "page": "",
-                        "external_url": url,
-                        "description": "Highlight 2",
-                    },
-                ),
+                ("highlight", highlight),
+                ("highlight", highlight),
             ]
         )
 
         form = self.form_class(instance=self.menu, data=nested_form_data(raw_data))
         self.assertFalse(form.is_valid())
-        self.assertIn("Duplicate URL. Please add a different one.", str(form.errors["highlights"]))
+        self.assertEqual(
+            form.errors["highlights"].data[0].block_errors[1].block_errors["external_url"].message,
+            "Duplicate URL. Please add a different one."
+        )
 
     def test_clean_columns_no_duplicates(self):
         """Checks that different pages/URLs across columns, sections, and sub-links do not raise errors."""
-        page1 = ThemePageFactory()
-        page2 = ThemePageFactory()
-        topic1 = TopicPageFactory()
-        topic2 = TopicPageFactory()
 
         raw_data = self.raw_form_data(
             columns_data=[
@@ -134,22 +111,23 @@ class MainMenuAdminFormTestCase(TestCase):
                                     "section",
                                     {
                                         "section_link": {
-                                            "page": page1.pk,
+                                            "page": self.theme_page_1.pk,
                                             "external_url": "",
                                             "title": "Theme Link",
                                         },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": topic1.pk,
-                                                        "external_url": "",
-                                                        "title": "Topic Link",
-                                                    },
-                                                )
-                                            ]
-                                        ),
+                                        "links": [
+                                            {
+                                                "id": uuid.uuid4(),
+                                                "type": "item",
+                                                "value": {
+                                                    "page": self.topic_page_1.pk,
+                                                    "external_url": "",
+                                                    "title": "Sub link #1",
+                                                },
+                                                "deleted": "", "order": "0"
+                                            },
+                                        ],
+                                        "links-count": 1,
                                     },
                                 )
                             ]
@@ -165,22 +143,23 @@ class MainMenuAdminFormTestCase(TestCase):
                                     "section",
                                     {
                                         "section_link": {
-                                            "page": page2.pk,
+                                            "page": self.theme_page_2.pk,
                                             "external_url": "",
                                             "title": "Theme Link2",
                                         },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": topic2.pk,
-                                                        "external_url": "",
-                                                        "title": "Topic Link2",
-                                                    },
-                                                )
-                                            ]
-                                        ),
+                                        "links": [
+                                            {
+                                                "id": uuid.uuid4(),
+                                                "type": "item",
+                                                "value": {
+                                                    "page": self.topic_page_2.pk,
+                                                    "external_url": "",
+                                                    "title": "Sub link #1",
+                                                },
+                                                "deleted": "", "order": "0"
+                                            },
+                                        ],
+                                        "links-count": 1,
                                     },
                                 )
                             ]
@@ -195,85 +174,40 @@ class MainMenuAdminFormTestCase(TestCase):
 
     def test_clean_columns_duplicate_section_link(self):
         """Checks that using the same page in two different sections (across columns) raises a duplicate error."""
-        same_page = ThemePageFactory()
-        different_page = TopicPageFactory()
 
-        raw_data = self.raw_form_data(
-            columns_data=[
-                (
-                    "column",
-                    {
-                        "sections": streamfield(
-                            [
-                                (
-                                    "section",
-                                    {
-                                        "section_link": {
-                                            "page": same_page.pk,
-                                            "external_url": "",
-                                            "title": "Theme Link1",
-                                        },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": different_page.pk,
-                                                        "external_url": "",
-                                                        "title": "Sub link #1",
-                                                    },
-                                                )
-                                            ]
-                                        ),
-                                    },
-                                )
-                            ]
-                        ),
-                    },
-                ),
+        sections = streamfield(
+            [
                 (
-                    "column",
+                    "section",
                     {
-                        "sections": streamfield(
-                            [
-                                (
-                                    "section",
-                                    {
-                                        "section_link": {
-                                            "page": same_page.pk,
-                                            "external_url": "",
-                                            "title": "Theme Link2",
-                                        },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": different_page.pk,
-                                                        "external_url": "",
-                                                        "title": "Sub link #2",
-                                                    },
-                                                )
-                                            ]
-                                        ),
-                                    },
-                                )
-                            ]
-                        ),
+                        "section_link": {
+                            "page": self.theme_page_1.pk,
+                            "external_url": "",
+                            "title": "Theme Link2",
+                        },
+                        "links": [],
+                        "links-count": 0,
                     },
-                ),
+                )
+            ]
+        )
+        raw_data = self.raw_form_data(
+            columns_data=[
+                ("column", {"sections": sections}),
+                ("column", {"sections": sections}),
             ]
         )
 
         form = self.form_class(instance=self.menu, data=nested_form_data(raw_data))
         self.assertFalse(form.is_valid())
-        self.assertIn("columns", form.errors)
-        self.assertIn("Duplicate page in section link.", str(form.errors["columns"]))
+        self.assertEqual(
+            form.errors["columns"].data[0].block_errors[1].block_errors["sections"].block_errors[0].block_errors[
+                "section_link"].message,
+            "Duplicate page. Please choose a different one."
+        )
 
     def test_clean_columns_duplicate_sub_link(self):
         """Checks that using the same sub-link page multiple times triggers a duplicate error."""
-        page1 = ThemePageFactory()
-        page2 = TopicPageFactory()
 
         raw_data = self.raw_form_data(
             columns_data=[
@@ -286,30 +220,33 @@ class MainMenuAdminFormTestCase(TestCase):
                                     "section",
                                     {
                                         "section_link": {
-                                            "page": page2.pk,
+                                            "page": self.theme_page_1.pk,
                                             "external_url": "",
                                             "title": "Section Link",
                                         },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": page1.pk,
-                                                        "external_url": "",
-                                                        "title": "Sub link #1",
-                                                    },
-                                                ),
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": page1.pk,
-                                                        "external_url": "",
-                                                        "title": "Sub link #2",
-                                                    },
-                                                ),
-                                            ]
-                                        ),
+                                        "links": [
+                                            {
+                                                "id": uuid.uuid4(),
+                                                "type": "item",
+                                                "value": {
+                                                    "page": self.topic_page_1.pk,
+                                                    "external_url": "",
+                                                    "title": "Sub link #1",
+                                                },
+                                                "deleted": "", "order": "0"
+                                            },
+                                            {
+                                                "id": uuid.uuid4(),
+                                                "type": "item",
+                                                "value": {
+                                                    "page": self.topic_page_1.pk,
+                                                    "external_url": "",
+                                                    "title": "Sub link #2",
+                                                },
+                                                "deleted": "", "order": "1"
+                                            }
+                                        ],
+                                        "links-count": 2,
                                     },
                                 )
                             ]
@@ -321,51 +258,8 @@ class MainMenuAdminFormTestCase(TestCase):
 
         form = self.form_class(instance=self.menu, data=nested_form_data(raw_data))
         self.assertFalse(form.is_valid())
-        self.assertIn("Duplicate page in links.", str(form.errors["columns"]))
 
-    def test_clean_columns_duplicate_across_section_link_and_sub_link(self):
-        """Checks that if a section link page is also used in a sub-link (in the same column or a different column),
-        it raises a duplicate error.
-        """
-        page1 = ThemePageFactory()
-
-        raw_data = self.raw_form_data(
-            columns_data=[
-                (
-                    "column",
-                    {
-                        "sections": streamfield(
-                            [
-                                (
-                                    "section",
-                                    {
-                                        "section_link": {
-                                            "page": page1.pk,
-                                            "external_url": "",
-                                            "title": "Section Link #1",
-                                        },
-                                        "links": streamfield(
-                                            [
-                                                (
-                                                    "topic_link",
-                                                    {
-                                                        "page": page1.pk,
-                                                        "external_url": "",
-                                                        "title": "Sub link #1",
-                                                    },
-                                                ),
-                                            ]
-                                        ),
-                                    },
-                                )
-                            ]
-                        ),
-                    },
-                )
-            ]
+        self.assertEqual(
+            form.errors["columns"].data[0].block_errors[0].block_errors["sections"].block_errors[0].block_errors["links"].block_errors[1].block_errors["page"].message,
+            "Duplicate page. Please choose a different one."
         )
-
-        form = self.form_class(instance=self.menu, data=nested_form_data(raw_data))
-        self.assertFalse(form.is_valid())
-        self.assertIn("Duplicate page in links.", str(form.errors["columns"]))
-        self.assertIn("Duplicate page in section link.", str(form.errors["columns"]))
