---
name: CI

on: # yamllint disable-line rule:truthy
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: '${{ github.head_ref || github.ref }}-${{ github.workflow }}'
  cancel-in-progress: true

env:
  POETRY_VERSION: '1.8.5' # keep in sync with pyproject.toml, Dockerfile
  COVERAGE_CORE: 'sysmon'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: poetry

      - name: Install dependencies
        run: make install-dev

      - name: Lint Python
        run: make lint-py
      - name: Lint HTML
        run: make lint-html

  lint-front-end:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Install npm dependencies
        run: npm ci --no-audit
      - name: CSS linting
        run: npm run lint:css
      - name: JS linting
        run: npm run lint:js
      - name: Prettier
        run: npm run lint:format

  compile_static:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - id: node-cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/.nvmrc') }}-${{ hashFiles('**/package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - run: npm run build:prod
      - uses: actions/upload-artifact@v4
        with:
          name: static
          path: cms/static_compiled/

  test-python:
    runs-on: ubuntu-latest
    needs:
      - lint
      - lint-front-end
      - compile_static

    env:
      DJANGO_SETTINGS_MODULE: cms.settings.test
      DATABASE_URL: postgres://postgres:postgres@localhost/postgres # pragma: allowlist secret
      ENABLE_DJANGO_DEFENDER: 'false'
      POSTGRES_HOST_AUTH_METHOD: trust
      SECRET_KEY: fake_secret_key_to_run_tests # pragma: allowlist secret
      KAFKA_SERVERS: localhost:9092

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      broker:
        image: bitnami/kafka:3.5.1
        env:
          # Enable plaintext connections for local testing.
          ALLOW_PLAINTEXT_LISTENER: 'yes'

          # Enable KRaft mode (no ZooKeeper).
          KAFKA_ENABLE_KRAFT: 'yes'

          # Use the KAFKA_CFG_ prefix for Kafka config.
          KAFKA_CFG_NODE_ID: '1'
          KAFKA_CFG_PROCESS_ROLES: 'broker,controller'
          KAFKA_CFG_LISTENERS: 'PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093'
          KAFKA_CFG_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092'
          KAFKA_CFG_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
          KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
          KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: '1@localhost:9093'
          KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
          KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
          KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: '1'
          KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS: '0'
          KAFKA_CFG_NUM_PARTITIONS: '3'
          # Enable auto-creation of topics
          KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
        ports:
          - '9092:9092'

    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: poetry

      - name: Install dependencies
        run: |
          make install-dev
          sudo apt-get install -y --no-install-recommends gettext cm-super texlive-latex-extra

      - uses: actions/download-artifact@v4
        with:
          name: static
          path: cms/static_compiled/

      - name: Fetch Design System templates
        run: make load-design-system-templates
      - name: collectstatic
        run: poetry run ./manage.py collectstatic --verbosity 0 --noinput --clear
      - name: System checks
        run: poetry run ./manage.py check
      - name: Check for missing migrations
        run: poetry run ./manage.py makemigrations --check --noinput
      - name: Create cache table
        run: poetry run ./manage.py createcachetable
      - name: Run migrations to work around Django bug (#35967)
        run: poetry run ./manage.py migrate --noinput
      - name: Compile translations
        run: make compilemessages
      - name: Test
        run: make test
      - name: Add coverage data to GitHub Action summary
        run: |
          poetry run coverage html --skip-covered --skip-empty
          echo "## Coverage summary" >> "$GITHUB_STEP_SUMMARY"
          poetry run coverage report --format=markdown >> "$GITHUB_STEP_SUMMARY"
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
      - name: Lint Migrations
        run: DJANGO_SETTINGS_MODULE=cms.settings.dev make lint-migrations

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        run: docker build --target web -t ons .

  repository_checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
      - name: Ensure .dockerignore (mostly) matches .gitignore
        run: ./.github/check_docker_ignore.py

  functional-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser:
          - chromium
    needs:
      - lint
      - lint-front-end
      - compile_static

    env:
      DJANGO_SETTINGS_MODULE: cms.settings.functional_test
      SECRET_KEY: fake_secret_key_to_run_tests # pragma: allowlist secret
      PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
      PLAYWRIGHT_TRACES_DIR: playwright_traces
      PLAYWRIGHT_TRACE: 'true'

    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: poetry

      - name: Install dependencies
        run: |
          make install-dev
          sudo apt-get install -y --no-install-recommends gettext cm-super texlive-latex-extra

      - name: Playwright Install
        run: poetry run python -m playwright install --with-deps ${{ matrix.browser }}

      - uses: actions/download-artifact@v4
        with:
          name: static
          path: cms/static_compiled/

      - name: Compile translations
        run: make compilemessages

      - name: Run Functional Tests
        run: make functional-tests

      - name: Upload Failure Traces
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-traces-${{ matrix.browser }}
          path: playwright_traces/
